<?php

namespace App\Http\Requests\ParameterRequest;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Http\Exceptions\HttpResponseException;
use Illuminate\Contracts\Validation\Validator;
use Illuminate\Http\Request;

class StoreParameterRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules(Request $request)
    {
        $id = $request->route('parameter');
        return [
            "project_id"=>"required|exists:projects,id",
            "variable"=>["required",'regex:/^\_?[a-zA-Z]+(\_[a-zA-Z]+)*$/','unique:parameters,variable,'.$id.',id,project_id,'.$request->get('project_id')],
            "name"=>"required|string|min:6|max:255",
            "description"=>"nullable|string|max:255",
            "inactive"=>"nullable|boolean"
        ];
    }

    /**
     * @return array
     */
    public function messages()
    {
        $validation = [];
        $validation["variable.regex"] =  "Код переменной может содержать только латинские буквы и символ подчеркивания.";
        return array_merge($validation,parent::messages()); // TODO: Change the autogenerated stub
    }

    /**
     * @param Validator $validator
     */
    public function failedValidation(Validator $validator)
    {
        throw new HttpResponseException(response()->json([
            'errors' => $validator->messages(),
            'errorType'=>'VALIDATION_ERROR'
        ],422));
    }
}
