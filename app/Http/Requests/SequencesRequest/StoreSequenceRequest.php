<?php

namespace App\Http\Requests\SequencesRequest;

use App\Models\Gateway;
use App\Models\GatewaySetting;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Http\Exceptions\HttpResponseException;
use Illuminate\Contracts\Validation\Validator;
use Illuminate\Http\Request;

class StoreSequenceRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules(Request $request)
    {
        $rules = [
            'name'=>'required|string|min:6|max:255',
            'api_alias'=>['required','regex:/^[a-zA-Z][a-zA-Z0-9-]{3,32}[a-zA-Z]$/'],
            'project_id'=>'required|exists:projects,id',
            'by_default'=>'nullable|boolean',
            'for_nonworking_time'=>'nullable|boolean',
        ];

        return $rules;
    }

    /**
     * @return array
     */
    public function messages()
    {
        $validation = [];
        $validation["api_alias.regex"] =  ["Вам необходимо заполнить alias в формате alias-for-example"];
        return array_merge($validation,parent::messages()); // TODO: Change the autogenerated stub
    }

    /**
     * @param Validator $validator
     */
    public function failedValidation(Validator $validator)
    {
        throw new HttpResponseException(response()->json([
            'errors' => $validator->messages(),
            'errorType'=>'VALIDATION_ERROR'
        ],422));
    }
}
