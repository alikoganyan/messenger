<?php

namespace App\Http\Requests\TemplateRequest;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Http\Exceptions\HttpResponseException;
use Illuminate\Contracts\Validation\Validator;
use Illuminate\Http\Request;

class StoreTemplateRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules(Request $request)
    {
        return [
            'project_id'=>'required|exists:projects,id',
            'country'=>'required|string|max:255',
            'name'=>'required|string|min:6|max:255',
            'event_id'=>'required|exists:events,id,project_id,'.$request->get('project_id'),
            'receiver_id'=>'required|exists:receivers,id,project_id,'.$request->get('project_id'),
            //'payment_type'=>'required|string|min:4|max:255',
            'text'=>'required|string|min:6',
            'menu_id'=>'nullable|exists:menus,id,project_id,'.$request->get('project_id'),
        ];
    }

    /**
     * @return array
     */
    public function messages()
    {
        return parent::messages(); // TODO: Change the autogenerated stub
    }

    /**
     * @param Validator $validator
     */
    public function failedValidation(Validator $validator)
    {
        throw new HttpResponseException(response()->json([
            'errors' => $validator->messages(),
            'errorType'=>'VALIDATION_ERROR'
        ],422));
    }
}
