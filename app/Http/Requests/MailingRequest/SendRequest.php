<?php

namespace App\Http\Requests\MailingRequest;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Http\Exceptions\HttpResponseException;
use Illuminate\Contracts\Validation\Validator;
use Illuminate\Http\Request;

class SendRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules(Request $request)
    {
        $validation = [];
        if($request->get('channel') == 'sms' || $request->get('channel') == 'whatsapp'){
            $validation = [
                "phones"=>'required|array',
                "phones.*"=>['regex:/^\+[0-9]{11,12}$/']
            ];
        }
        if($request->get('channel') == 'email'){
            $validation = [
                "from"=>"required",
                "to"=>"required"
            ];
        }
        $main = [
            "project_key"=>"required",
            "channel"=>"required",
            "template_id"=>"required",
            "event_id"=>"required",
            "receiver_id"=>"required",
            "country"=>"required",
            "parameters"=> "required"
        ];
        return array_merge($validation,$main);

    }

    /**
     * @return array
     */
    public function messages()
    {
        return parent::messages(); // TODO: Change the autogenerated stub
    }

    /**
     * @param Validator $validator
     */
    public function failedValidation(Validator $validator)
    {
        throw new HttpResponseException(response()->json([
            'errors' => $validator->messages(),
            'errorType' => 'VALIDATION_ERROR'
        ], 422));
    }
}
